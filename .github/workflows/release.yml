name: Docker and Semantic Release

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 * * * *'
  pull_request:
    branches: [ "cron" ]

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      diff_version: ${{ steps.get-version.outputs.diff_version }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Python Semantic Release
        id: release
        # uses: tumaysem/python-semantic-release@master
        uses: nut-a/python-semantic-release@publish_gh_outputs
        with:
          additional_options: --github
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print all outputs release
        run: echo ${{ toJSON(steps.release.outputs) }}

      - uses: actions/checkout@v3
      
      - name: Calculate version
        id: get-version
        uses: ./.github/actions/calculate_release_versions
        with:
          published_version: ${{ steps.release.outputs.published_version }}
          current_version: ${{ steps.release.outputs.current_version }}       

      - name: Print version
        run: |
          echo "Version: ${{ steps.get-version.outputs.version }}"
          echo "Diff version: ${{ steps.get-version.outputs.diff_version }}"

  get-latest-versions:
    needs: semantic-release
    uses: ./.github/workflows/fetch_latest_versions.yml
    with:
      autoagora-indexer-service-version: ${{ needs.semantic-release.outputs.diff_version }}

  docker-release:
    needs: [semantic-release, get-latest-versions]
    if: ${{ needs.get-latest-versions.outputs.versions != '[]' }}
    permissions:
      packages: write
    strategy:
      matrix:
        indexer-version: ${{ fromJson(needs.get-latest-versions.outputs.versions) }}
    uses: ./.github/workflows/docker_build_release.yml
    with:
      indexer-version: ${{ matrix.indexer-version }}
      version: ${{ needs.semantic-release.outputs.version }}
      org-name: ${{ vars.ORG_NAME }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}